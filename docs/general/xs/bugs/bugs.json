{ 
    "Fixed": [
        {
            "Name": "`xsEffectAmount` Crashes When Source Player Does Not Exist",
            "Description" : "When an attribute for a player that is not present in the game is modified, a crash occurs",
            "Expected Behaviour": "Expressions and variables should be able to be used when initialising Vectors.",
            "Reproduction Steps": [
                "Create a new scenario or RMS",
                "Create a new XS script with the following code: INSERT_CODE_BLOCK_HERE",
                "Include the script in the scenario or RMS",
                "When a game is played with less than 8 players, a crash will occur"
            ],
            "Code File": "effect_amount1.xs",
            "Version Fixed": "56005",
            "show": true
        },
        {
            "Name": "`xsEffectAmount` Crashes When Negative ID Is Provided For Tech/Object",
            "Description" : "When a negative object/tech ID is provided when using `cSetAttribute` (or similar operations), a crash occurs",
            "Expected Behaviour": "Expressions and variables should be able to be used when initialising Vectors.",
            "Reproduction Steps": [
                "Create a new scenario or RMS",
                "Create a new XS script with the following code: INSERT_CODE_BLOCK_HERE",
                "Include the script in the scenario or RMS",
                "When a game is played, a crash will occur"
            ],
            "Code File": "effect_amount3.xs",
            "Version Fixed": "56005",
            "show": true
        },
        {
            "Name": "XS Files Do Not Transfer In A Lobby",
            "Description" : "When playing in a multiplayer lobby, the required XS scripts are not transfered to other players from the host. (Currently, `#includeXS` works for scripts that the host has in their profile folder, but recursive includes and scripts from other sources are still not transferred)",
            "Expected Behaviour": "The main XS script and all XS scripts imported in the main script using `#!cpp include \"fileName.xs\";` (and potentially more imported scripts inside those scripts too) should be transfered to everyone.",
            "Reproduction Steps": [
                "Create a new scenario or RMS",
                "Create a new XS script that chats something to the screen",
                "Include the script in the scenario or RMS",
                "Host a lobby with at least two human players",
                "Set the map as the above scenario or RMS",
                "When the game is started, the host sees the message chatted but the others get a `failed to open file` error"
            ],
            "Code File": "",
            "Version Fixed": "60670",
            "show": true
        }
    ],
    "Effect Amount": [
        {
            "Name": "`xsEffectAmount` effect `cMulAttribute` and `cAddAttribute` with attribute `cAttack/cArmor`",
            "Description" : "When using `xsEffectAmount` and `cMulAttribute` or `cAddAttribute` to modify `cAttack/cArmor`, the effect does not change the attack/armour at all",
            "Expected Behaviour": "Expected behaviour is demonstrated using the following example:",
            "Reproduction Steps": [
                "Create a new scenario or RMS",
                "Create a new XS script with the following code: INSERT_CODE_BLOCK_HERE",
                "Include the script in the scenario or RMS",
                "When a game is played using the scenario or RMS, The attack and armour of the Genghis Khan unit is unchanged"
            ],
            "Code File": "effect_amount2.xs",
            "Version Fixed": "",
            "show": true
        }
    ],
    "Editor": [
        {
            "Name": "Script Call A Function With Parameters",
            "Description" : "When a function that takes arguments is defined in an XS file is called using script call, all XS execution stops. No syntax errors are shown, this happens completely silently",
            "Expected Behaviour": "Function call works as expected, without crashing the entirety of XS execution",
            "Reproduction Steps": [
                "Create a new scenario or RMS",
                "Create a new XS script with the following code: INSERT_CODE_BLOCK_HERE",
                "Include the script in the scenario, and create a trigger with a script call condition/effect",
                "Type `#!cpp test(1, 2)`; in the message box for the script call",
                "When the scenario is played, no text is chatted to the screen, execution fails silently"
            ],
            "Code File": "param.xs",
            "Version Fixed": "",
            "show": true
        },
        {
            "Name": "Script Call A Function With Comments",
            "Description" : "When a function that contains comments is defined in a script call box, a parsing error is encountered",
            "Expected Behaviour": "Function call with comments should correctly ignore comments and parse",
            "Reproduction Steps": [
                "Create a new scenario",
                "Create a new trigger with a script call effect",
                "Place the following code inside the script call box: INSERT_CODE_BLOCK_HERE",
                "When the effect is double clicked/the scenario is played, a parse error is shown"
            ],
            "Code File": "comment_fail.xs",
            "Version Fixed": "",
            "show": true
        }
    ],
    "Language Syntax": [
        {
            "Name": "Outputs Of Operations Are Of The Wrong Data Type",
            "Description" : "The output type of an operation is determined by the first operand `a*b`. For example: `#!cpp 9*5.5` evaluates to `#!cpp 49` and not `#!cpp 49.5`. However, the expression `#!cpp 5.5*9` gives the correct result.",
            "Expected Behaviour": "Both the expressions in the above example should yield the same result.",
            "Reproduction Steps": [
                "Create a new scenario or RMS",
                "Create a new XS script with the following code: INSERT_CODE_BLOCK_HERE",
                "Include the script in the scenario or RMS",
                "When a game is played using the scenario or RMS, `#!cpp 6.363636` should have been chatted to the screen, but instead `#!cpp 6` is shown on the screen."
            ],
            "Code File": "operator_types.xs",
            "Version Fixed": "",
            "show": true
        },
        {
            "Name": "Modulo Operator Does Not Work Properly With Floating Point Values",
            "Description" : "Using the modulo operator on floats does not return the fractional part of the answer.",
            "Expected Behaviour": "Using the modulo operator on a float value should correctly return the fractional part of the remainder.",
            "Reproduction Steps": [
                "Create a new scenario or RMS",
                "Create a new XS script with the following code: INSERT_CODE_BLOCK_HERE",
                "Include the script in the scenario or RMS",
                "When a game is played using the scenario or RMS, `#!cpp 0.500000` should be chatted to the screen, but instaed 0.000000 is shown."
            ],
            "Code File": "modulo.xs",
            "Version Fixed": "",
            "show": true
        },
        {
            "Name": "Function Parameters And Return Statements Do Not Implicitly Type Cast",
            "Description" : "Passing an `#!cpp int` to a function parameter that is supposed to take in a `#!cpp float` value gets used as an `#!cpp int` and is not type casted. Similarly, values returned from a function are not type casted to the function's return type. For example, if an `#!cpp int` is returned in a function that is supposed to return a `#!cpp float`, it will just return the `#!cpp int` as is without type casting into `#!cpp float`",
            "Expected Behaviour": "Values that are passed to/returned from a function should be correctly type casted.",
            "Reproduction Steps": [
                "Create a new scenario or RMS",
                "Create a new XS script with the following code: INSERT_CODE_BLOCK_HERE",
                "Include the script in the scenario or RMS",
                "When a game is played using the scenario or RMS, `#!cpp 13.750000` should be chatted to the screen, but `#!cpp 13` is shown instead"
            ],
            "Code File": "return2.xs",
            "Version Fixed": "",
            "show": true
        },
        {
            "Name": "Limit On Number Of Params In A Function Call",
            "Description" : "The number of parameters that can be used IN a function call are limited to 12. Attempting to call a function with more parameters results in an error from the game. Note that the error in the example shown below happens at the line the call is made, and not at the function definition itself. This suggests that defining a function with more than 12 parameters can be defined but they can't be called",
            "Expected Behaviour": "There should ideally be no limit on the amount of parameters for a function",
            "Reproduction Steps": [
                "Create a new scenario or RMS",
                "Create a new XS script with the following code: INSERT_CODE_BLOCK_HERE",
                "Include the script in the scenario or RMS",
                "When a game is played using this above script, an error at line 15 (the last line of the function call) is shown",
                "If the lines with the function call are commented out, the error goes away"
            ],
            "Code File": "param_limit.xs",
            "Version Fixed": "",
            "show": true
        },
        {
            "Name": "Cannot Use Variables Or Expressions In Vector Initialisation",
            "Description" : "When initialising a vector, expressions or variables cannot be used in the initialisation. The code in question is shown below.",
            "Expected Behaviour": "Expressions and variables should be able to be used when initialising Vectors.",
            "Reproduction Steps": [
                "Create a new scenario or RMS",
                "Create a new XS script with the following code: INSERT_CODE_BLOCK_HERE",
                "Include the script in the scenario or RMS",
                "When a game is played using the scenario or RMS, the `Could not parse the code for 'main' function` error is shown"
            ],
            "Code File": "vector_init1.xs",
            "Version Fixed": "",
            "show": true
        },
        {
            "Name": "Unary Negative Does Not Work",
            "Description" : "The unary negative operator does not work.",
            "Expected Behaviour": "Unary negative operator should return the negative of the number.",
            "Reproduction Steps": [
                "Create a new scenario or RMS",
                "Create a new XS script with the following code: INSERT_CODE_BLOCK_HERE",
                "Include the script in the scenario or RMS",
                "When a game is played using the scenario or RMS, the `Could not parse the code for 'main' function` error is shown"
            ],
            "Code File": "unary.xs",
            "Version Fixed": "",
            "show": true
        },
        {
            "Name": "Explicit Type Casting Does Not Work",
            "Description" : "Explicit type casting does not work on variables or at initialisation.",
            "Expected Behaviour": "Explicit type casting should be able to be used to convert one data type to another.",
            "Reproduction Steps": [
                "Create a new scenario or RMS",
                "Create a new XS script with the following code: INSERT_CODE_BLOCK_HERE",
                "Include the script in the scenario or RMS",
                "When a game is played using the scenario or RMS, the effects described in the code using comments for each case are observed"
            ],
            "Code File": "types2.xs",
            "Version Fixed": "",
            "show": true
        },
        {
            "Name": "Loop Variable Not Bounded To The Scope Of The Loop",
            "Description" : "The loop variable from a `#!cpp for` loop can be used anywhere outside the body of the loop",
            "Expected Behaviour": "The scope of the looping variable in `#!cpp for` loop should be limited only to the body of the loop",
            "Reproduction Steps": [
                "Create a new scenario or RMS",
                "Create a new XS script with the following code: INSERT_CODE_BLOCK_HERE",
                "Include the script in the scenario or RMS",
                "When a game is played using the scenario or RMS, 'j = 10' will be printed last because of the chat data at the end."
            ],
            "Code File": "scope1.xs",
            "Version Fixed": "",
            "show": true
        },
        {
            "Name": "Assigning Loop Variable To Itself Does Not Throw An Error",
            "Description" : "Assigning the loop variable from a `#!cpp for` loop to itself in the loop definition statement doesn't throw an error. The loop body is even run once",
            "Expected Behaviour": "This should throw an error in the editor",
            "Reproduction Steps": [
                "Create a new scenario or RMS",
                "Create a new XS script with the following code: INSERT_CODE_BLOCK_HERE",
                "Include the script in the scenario or RMS",
                "When a game is played all three chat data functions run and show on screen"
            ],
            "Code File": "scope2.xs",
            "Version Fixed": "",
            "show": true
        },
        {
            "Name": "Integers Softly Limited To `999_999_999`",
            "Description" : "An `#!cpp int` cannot be directly initialised a value greater than `999_999_999`. Attempting to do so causes a parsing error. They can still be given values higher than `999_999_999` by just adding/any other math operations",
            "Expected Behaviour": "Any value between the 32 bit signed int limits (`-2147483648` and `2147483647` inclusive) should be a valid initial value for an integer",
            "Reproduction Steps": [
                "Create a new scenario or RMS",
                "Create a new XS script with the following code: INSERT_CODE_BLOCK_HERE",
                "Include the script in the scenario or RMS",
                "When a game is played using the scenario or RMS, 'j = 10' will be printed last because of the chat data at the end."
            ],
            "Code File": "int_num_limit.xs",
            "Version Fixed": "",
            "show": true
        },
        {
            "Name": "Static Variables In Recursive Functions",
            "Description" : "If a static variable is declared inside a recursive function, its value cannot be changed",
            "Expected Behaviour": "static variables inside recursive functions should behave normally like they do in C++",
            "Reproduction Steps": [
                "Create a new scenario or RMS",
                "Create a new XS script with the following code: INSERT_CODE_BLOCK_HERE",
                "Include the script in the scenario or RMS",
                "When a game is played using the scenario or RMS, the values of the variable `a` are always the same"
            ],
            "Code File": "staticrec.xs",
            "Version Fixed": "",
            "show": true
        },
        {
            "Name": "Static Variables In Global Scope",
            "Description" : "If a static variable is declared in the global scope, XS execution fails silently",
            "Expected Behaviour": "This should be allowed (or throws an error) since static variables technically give variables internal linkage which they already have by default in XS. What should really not be allowed though is using `#!cpp extern static int a = 10;`",
            "Reproduction Steps": [
                "Create a new scenario or RMS",
                "Create a new XS script with the following code: INSERT_CODE_BLOCK_HERE",
                "Include the script in the scenario or RMS",
                "When a game is played using the scenario or RMS, nothing is chatted to the screen"
            ],
            "Code File": "static.xs",
            "Version Fixed": "",
            "show": true
        },
        {
            "Name": "Strings In Global Scope",
            "Description" : "A string declared in the global scope doesn't retain its value",
            "Expected Behaviour": "When a string is declared in the global scope, it should be usable like other data type variables",
            "Reproduction Steps": [
                "Create a new scenario or RMS",
                "Create a new XS script with the following code: INSERT_CODE_BLOCK_HERE",
                "Include the script in the scenario or RMS",
                "When a game is played using the scenario or RMS, the actual value that was assigned to the string is not chatted to the screen, but something random"
            ],
            "Code File": "global_string.xs",
            "Version Fixed": "",
            "show": true
        },
        {
            "Name": "Off By One Error With `infiniteLoopLimit`",
            "Description" : "If `infiniteLoopLimit = n;` is used inside a function, it makes it so that ALL loops in that function run a maximum of `n+1` times.",
            "Expected Behaviour": "It should make the loops run only `n` times, one is extra",
            "Reproduction Steps": [
                "Create a new scenario or RMS",
                "Create a new XS script with the following code: INSERT_CODE_BLOCK_HERE",
                "Include the script in the scenario or RMS",
                "When a game is played using the scenario or RMS, the last line chatted to the screen is `#!cpp \"loop count 11\"`."
            ],
            "Code File": "infloop.xs",
            "Version Fixed": "",
            "show": true
        },
        {
            "Name": "Silent XS Crash with `infiniteRecursionLimit`",
            "Description" : "If `infiniteRecursionLimit = n;` is used inside a function, the function may only be called `n-1` times in one call stack. Attempting to call it for the `n`-th time will result in a silent XS crash",
            "Expected Behaviour": "The `n`-th function call should run normally, and further calls to the function **in the same call stack** should be prevented. The entirety of XS execution should not crash",
            "Reproduction Steps": [
                "Create a new scenario or RMS",
                "Create a new XS script with the following code: INSERT_CODE_BLOCK_HERE",
                "Include the script in the scenario or RMS",
                "When a game is played using the scenario or RMS, the last line chatted to the screen is `#!cpp \"recursion test 9\"`. The last xsChatData in main() isn't run at all."
            ],
            "Code File": "infrec.xs",
            "Version Fixed": "",
            "show": true
        },
        {
            "Name": "Return Statements Do Not Work As Documented",
            "Description" : "Paranthesis are needed around return expressions for them to work.",
            "Expected Behaviour": "Return expressions should work with or without paranthesis.",
            "Reproduction Steps": [
                "Create a new scenario or RMS",
                "Create a new XS script with the following code: INSERT_CODE_BLOCK_HERE",
                "Include the script in the scenario or RMS",
                "When a game is played using the scenario or RMS, the `Could not parse the code for 'test' function` error is shown"
            ],
            "Code File": "return1.xs",
            "Version Fixed": "",
            "show": true
        },
        {
            "Name": "Scopes Cannot Be Explicitly Created",
            "Description" : "`{}` cannot be used to explicitly create a scope",
            "Expected Behaviour": "Code within `{}` should define a scope and variable lifetime should properly be managed like in C++",
            "Reproduction Steps": [
                "Create a new scenario or RMS",
                "Create a new XS script with the following code: INSERT_CODE_BLOCK_HERE",
                "Include the script in the scenario or RMS",
                "When a game is played using the scenario or RMS, a parsing error is thrown"
            ],
            "Code File": "blocks.xs",
            "Version Fixed": "",
            "show": true
        },
        {
            "Name": "Cannot Declare Variables As A `#!cpp const` In Function Parameters",
            "Description" : "It is not possible to declare a function parameter as a `#!cpp const` even though it is used in the `#!cpp xsChatData` function in the official documentation.",
            "Expected Behaviour": "It should bee possible to declare function parameters as a `#!cpp const`",
            "Reproduction Steps": [
                "Create a new scenario or RMS",
                "Create a new XS script with the following code: INSERT_CODE_BLOCK_HERE",
                "Include the script in the scenario or RMS",
                "When a game is played using the scenario or RMS, the `'const' is not a valid parameter type` error is shown"
            ],
            "Code File": "const.xs",
            "Version Fixed": "",
            "show": true
        },
        {
            "Name": "Missing Data Types Which Are Documented",
            "Description" : "The `#!cpp long`, `#!cpp char` and `#!cpp double` data types do not exist, even though the official XS documentation references them.",
            "Expected Behaviour": "Variables of the `#!cpp long`, `#!cpp char` and `#!cpp double` data types shoulld be able to be initialised.",
            "Reproduction Steps": [
                "Create a new scenario or RMS",
                "Create a new XS script with the following code: INSERT_CODE_BLOCK_HERE",
                "Include the script in the scenario or RMS",
                "When a game is played using the scenario or RMS, the `Could not parse the code for 'main' function` error is shown"
            ],
            "Code File": "types1.xs",
            "Version Fixed": "",
            "show": true
        },
        {
            "Name": "Weird Behaviour With Return Statements",
            "Description" : "This behaviour is not understood well",
            "Expected Behaviour": "An Error?",
            "Reproduction Steps": [
                "Create a new scenario or RMS",
                "Create a new XS script with the following code: INSERT_CODE_BLOCK_HERE",
                "Include the script in the scenario or RMS",
                "Run the `main` function of the script in the scenario"
            ],
            "Code File": "return3.xs",
            "Version Removed": "",
            "show": true
        },
        {
            "Name": "Using Single Quotes Causes The `Could not emit quads` Error",
            "Description" : "Using single quotes (to construct strings) is not allowed and causes the `could not emit quads` error",
            "Expected Behaviour": "A more useful error along the lines of: \"Could not parse function x\" or \"Single quotes not allowed\"",
            "Reproduction Steps": [
                "Create a new scenario or RMS",
                "Create a new XS script with the following code: INSERT_CODE_BLOCK_HERE",
                "Include the script in the scenario or RMS",
                "Run the `main` function of the script in the scenario"
            ],
            "Code File": "quotes.xs",
            "Version Removed": "",
            "show": true
        }
    ],
    "Important": [
        {
            "Name": "XS File Transferring",
            "Description" : "\n\n1. In a lobby, to other players:\n    1. In an RMS:\n        1. [ ] from the game dir\n        2. [X] from the profile dir\n        3. [X] from the mods (local/subscribed) dir\n    2. In a Scenario:\n        1. [ ] from the game dir\n        2. [X] from the profile dir\n        3. [X] from the mods (local/subscribed) dir\n2. To spectators:\n    1. In an RMS:\n        1. [ ] from the game dir\n        2. [ ] from the profile dir\n        3. [ ] Transfers the directly included XS (using #includeXS) file from the mods (local/subscribed) dir to others, but in the wrong temp folder location\n    2. In a Scenario:\n        1. [ ] from the game dir\n        2. [ ] from the profile dir\n        3. [ ] Transfers the directly included XS (using script file name box) file from the mods (local/subscribed) dir to others, but in the wrong temp folder location",
            "Expected Behaviour": "--",
            "Reproduction Steps": ["--"],
            "Code File": "",
            "Version Fixed": "TEST THIS",
            "show": false
        },
        {
            "Name": "Researching a technology twice in XS causes a crash",
            "Description" : "Calling `xsResearchTechnology` twice for the same tech on the same player crashes the game",
            "Expected Behaviour": "These functions should work in an RMS as they do in scenarios",
            "Reproduction Steps": [
                "Create a new RMS/Scenario with the following code XS script included: INSERT_CODE_BLOCK_HERE",
                "When a game is played a crash occurs"
            ],
            "Code File": "res_tech_2x.xs",
            "Version Fixed": "",
            "show": true
        },
        {
            "Name": "Technology Related XS function Do Not Work In RMS",
            "Description" : "`xsResearchTechnology` and `xsGetPlayerNumberOfTechs` cannot be used in RMS",
            "Expected Behaviour": "These functions should work in an RMS as they do in scenarios",
            "Reproduction Steps": [
                "Create a new RMS",
                "Create a new XS script with the following code: INSERT_CODE_BLOCK_HERE",
                "When a game is played using the XS script included in an RMS, a parsing error is shown"
            ],
            "Code File": "res_tech.xs",
            "Version Fixed": "???",
            "show": false
        },
        {
            "Name": "Object Count Related XS function Do Not Work In RMS",
            "Description" : "`xsGetObjectCount` and `xsGetObjectCountTotal` cannot be used in RMS",
            "Expected Behaviour": "These functions should work in an RMS as they do in scenarios",
            "Reproduction Steps": [
                "Create a new RMS",
                "Create a new XS script with the following code: INSERT_CODE_BLOCK_HERE",
                "When a game is played using the XS script included in an RMS, a parsing error is shown"
            ],
            "Code File": "obj_cnt.xs",
            "Version Fixed": "???",
            "show": false
        }
    ],
    "Crashes": [
        {
            "Name": "Crash On Using `%` Symbols In `xsChatData()`",
            "Description" : "Cannot escape `%` symbols in the message, since they are considered special characters because of the `%d` and `%f` usage.",
            "Expected Behaviour": "It should be possible to escape the `%` character by using a backslash `\\`.",
            "Reproduction Steps": [
                "Create a new scenario or RMS",
                "Create a new XS script with the following code: INSERT_CODE_BLOCK_HERE",
                "Include the script in the scenario or RMS",
                "When a game is played using the scenario or RMS, the game will crash"
            ],
            "Code File": "chatdata1.xs",
            "Version Fixed": "",
            "show": true
        },
        {
            "Name": "Using `goto` With A Non Existent Label Crashes The Game",
            "Description" : "If a goto statement is used as shown below, it crashes the game. How to define a working label in XS is currently unknown",
            "Expected Behaviour": "The game should warn about wrong usage of `goto` to a non existent label. How is a label defined in the first place in XS?",
            "Reproduction Steps": [
                "Create a new scenario or RMS",
                "Create a new XS script with the following code: INSERT_CODE_BLOCK_HERE",
                "Include the script in the scenario or RMS",
                "When a game is played using the scenario or RMS, A crash will occur"
            ],
            "Code File": "goto.xs",
            "Version Fixed": "",
            "show": true
        },
        {
            "Name": "Crash On Using An Integer Larger Than `999_999_999` In Chat Data",
            "Description" : "Trying to chan an `#!cpp int` that is bigger than `999_999_999` with `%d` in `xsChatData` causes a crash",
            "Expected Behaviour": "The int value should be printed properly as expected",
            "Reproduction Steps": [
                "Create a new scenario or RMS",
                "Create a new XS script with the following code: INSERT_CODE_BLOCK_HERE",
                "Include the script in the scenario or RMS",
                "When a game is played using the scenario or RMS, A crash will occur"
            ],
            "Code File": "int_num_limit2.xs",
            "Version Fixed": "",
            "show": true
        }
    ],
    "Chat Data": [
        {
            "Name": "Cannot Print `#!cpp 0` Or `#!cpp 1` At The Start Of The Line In `xsChatData()`",
            "Description" : "If a `#!cpp 0` or `#!cpp 1` character occurs at the beginning of a string that is being chatted to the screen using `xsChatData`, then the `#!cpp 0` or `#!cpp 1` characters do not appear in the message.",
            "Expected Behaviour": "`#!cpp 0` or `#!cpp 1` should be shown correctly at the beginning of the line if used in an `xsChatData` function",
            "Reproduction Steps": [
                "Create a new scenario or RMS",
                "Create a new XS script with the following code: INSERT_CODE_BLOCK_HERE",
                "Include the script in the scenario or RMS",
                "When a game is played using the scenario or RMS, any `#!cpp 1` or `#!cpp 0` at the beginning of the lines are omitted in the resulting message on screen."
            ],
            "Code File": "chatdata2.xs",
            "Version Fixed": "",
            "show": true
        }
    ]
}